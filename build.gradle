apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'cobertura'
apply plugin: 'com.github.kt3k.coveralls'


buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.1.9.RELEASE'
        classpath 'org.springframework:springloaded:1.2.1.RELEASE'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
        classpath('net.saliman:gradle-cobertura-plugin:2.0.0') {
            exclude module: 'xml-apis'
        }
        classpath 'xml-apis:xml-apis:1.0.b2'
    }
}

jar {
    baseName = 'iSonic'
    version = '0.1.0'
}

idea {
    project {
        jdkName = '1.7'
    }
    module {
        name = 'iSonic'
        excludeDirs += [file('tmp'), file('gradle'), file('.idea')]
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
        downloadJavadoc = false
        downloadSources = true
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://maven.restlet.org" }
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.7'
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile 'org.springframework.boot:spring-boot-starter-jetty'
    compile('org.springframework.boot:spring-boot-starter-data-solr') {
        exclude module: 'spring-data-solr'
    }
    compile 'org.springframework.data:spring-data-solr:1.3.1.RELEASE'
    compile 'org.springframework:spring-context-support'
    compile 'org.apache.solr:solr-core:4.10.2'
    compile 'org.quartz-scheduler:quartz:2.2.1'
    testCompile 'junit:junit'
    testCompile 'org.springframework:spring-test'
    testCompile 'org.spockframework:spock-spring:0.7-groovy-2.0'
}

configurations {
    all*.exclude group: 'log4j', module: 'log4j'
    all*.exclude group: 'xml-apis', module: 'xml-apis'
}

bootRun {
    // Allows parameters to be passed to the application. Ex:
    // -PbootArgs="-Dspring.profiles.active=external-solr"
    if (project.hasProperty('bootArgs')) {
        jvmArgs project.bootArgs.split('\\s+')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}

cobertura.coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report
cobertura.coverageSourceDirs = sourceSets.main.groovy.srcDirs